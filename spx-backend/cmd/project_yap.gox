import (
	"context"
	"os"
	"strconv"
	"encoding/json"
	"github.com/goplus/builder/spx-backend/internal/core"
)

var (
	p *core.Project
)

todo := context.TODO()

get "/project/:id", ctx => {
	id := ctx.param("id")
	res, _ := p.FileInfo(todo, id)
	ctx.json {
		"code":200,
		"msg":"OK",
		"data":{"id":res.ID,"address":os.Getenv("QINIU_PATH")+res.Address,},
	}
}

post "/project/save", ctx=>{
	id := ctx.FormValue("id")
	uid := ctx.FormValue("uid")
	name:=ctx.FormValue("name")
	isPublic:=ctx.FormValue("isPublic")
	ip, _ := strconv.Atoi(isPublic)
	file,header,_:=ctx.FormFile("file")
	codeFile:=&core.CodeFile{
		ID:id,
		Name:name,
		AuthorId :uid,
		IsPublic:ip,
		Status:1,
	}
	res,_ := p.SaveProject(todo,codeFile,file,header)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":{"id":res.ID,"address":os.Getenv("QINIU_PATH")+res.Address,},
	}
}

post "/project/check-update",ctx=>{
    var fileInfoWrapper core.FileInfoWrapper
    err := json.NewDecoder(ctx.Body).Decode(&fileInfoWrapper)
    if err != nil {
        ctx.json {
            "code":500,
            "msg":"err",
        }
    }
    res,_:= p.CheckUpdate(todo,fileInfoWrapper.FileInfo)
    ctx.json {
        "code":200,
        "msg":"ok",
        "data":res,
    }
}

post "/project/upload", ctx=>{
    err:=ctx.ParseMultipartForm(10 << 20)
    if err != nil {
        ctx.json {
            "code":500,
            "msg":"err",
        }
    }
    relativePath := ctx.FormValue("relativePath")
    file,_,_:=ctx.FormFile("file")
    err= p.UploadFile(todo,relativePath,file)
    if err != nil {
        ctx.json {
            "code":500,
            "msg":err,
        }
    }else{
        ctx.json {
            "code":200,
            "msg":"ok",
        }
    }
}

post "/project/fmt", ctx=>{
	ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
	body := ctx.FormValue("body")
	imports := ctx.FormValue("import")
	res := p.CodeFmt(todo,body,imports)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":res,
	}
}

get "/asset/:id", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    id := ctx.param("id")
    asset, _ := p.Asset(todo, id)
    ctx.json {
    		"code":200,
    		"msg":"ok",
    		"data":{"asset": asset},
    }
}

post "/asset/upload", ctx => {
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
     	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
        uid := ctx.FormValue("uid")
        name:=ctx.FormValue("name")
        category:=ctx.FormValue("category")
        isPublic:=ctx.FormValue("isPublic")
        assetType := ctx.FormValue("assetType")
        ip, _ := strconv.Atoi(isPublic)
        file,header,_:=ctx.FormFile("file")
        	asset:=&core.Asset{
        		 Name:name,
                 AuthorId:uid,
                 Category:category,
                 IsPublic:ip,
                 AssetType:assetType,
                 Status:1,
        	}
        	res,_ := p.UploadAsset(todo,asset,file,header)
        	ctx.json {
        		"code":200,
        		"msg":"ok",
        		"data":{"id":res.ID,"address":os.Getenv("QINIU_PATH")+res.Address,},
        	}
}

post "/asset/save", ctx => {
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
     	id := ctx.FormValue("id")
        uid := ctx.FormValue("uid")
        name:=ctx.FormValue("name")
        category:=ctx.FormValue("category")
        isPublic:=ctx.FormValue("isPublic")
        assetType := ctx.FormValue("assetType")
        ip, _ := strconv.Atoi(isPublic)
        file,header,_:=ctx.FormFile("file")
        	asset:=&core.Asset{
        	     ID:id,
        		 Name:name,
                 AuthorId:uid,
                 Category:category,
                 IsPublic:ip,
                 AssetType:assetType,
                 Status:1,
        	}
        	_, _ = p.SaveAsset(todo,asset,file,header)
        	ctx.json {
        		"code":200,
        		"msg":"ok",
        		"data":"",
        	}
}

get "/list/asset/:pageIndex/:pageSize/:assetType", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    pageIndex := ctx.param("pageIndex")
    pageSize := ctx.param("pageSize")
    assetType := ctx.param("assetType")
    category := ctx.param("category")
    result, _ := p.AssetList(todo, pageIndex, pageSize, assetType, category)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": result,
    }
}

get "/list/pubProject/:pageIndex/:pageSize", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    pageIndex := ctx.param("pageIndex")
    pageSize := ctx.param("pageSize")
    result, _ := p.PubProjectList(todo, pageIndex, pageSize)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": result,
    }
}
get "/list/userProject/:uid/:pageIndex/:pageSize", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    pageIndex := ctx.param("pageIndex")
    pageSize := ctx.param("pageSize")
    uid := ctx.param("uid")
    result, _ := p.UserProjectList(todo, pageIndex, pageSize,uid)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": result,
    }
}
post "/project/updateIsPublic", ctx=>{
	ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
	id := ctx.FormValue("id")
	_ = p.UpdatePublic(todo,id)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":"",
	}
}
post "/asset/search", ctx=>{
	ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
	search := ctx.FormValue("search")
	assets,_ := p.SearchAsset(todo,search)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":assets,
	}
}

conf := &core.Config{}
p, _ = core.New(todo, conf)

run ":8081"