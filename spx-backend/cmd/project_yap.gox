import (
	"context"
	"os"
	"io"
	"strconv"
	"encoding/json"

	"github.com/goplus/builder/spx-backend/internal/common"
	"github.com/goplus/builder/spx-backend/internal/core"
)

var (
	p *core.Project
)

todo := context.TODO()

options("/",ctx=>{
    common.SetHeaders(ctx)
    ctx.json({
        "code": 200,
        "msg": "ok",
    })
})

get "/project", ctx => {
	id := ctx.param("id")
	res, _ := p.FileInfo(todo, id)
	ctx.json {
		"code":200,
		"msg":"OK",
		"data":{"id":res.ID,"address":os.Getenv("QINIU_PATH")+"/"+res.Address,},
	}
}


post "/project/allsave", ctx=>{
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Credentials", "true")
    ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
	id := ctx.FormValue("id")
	userId := ""
    token := core.GetToken(ctx)
    user, err := p.GetUser(token)
    if err != nil {
        printf("get user error:", err)
    } else {
        userId = user.Id
    }
	name:=ctx.FormValue("name")
	file,header,_:=ctx.FormFile("file")
	codeFile:=&core.CodeFile{
		ID:id,
		Name:name,
		AuthorId :userId,
	}
	res,_ := p.SaveAllProject(todo,codeFile,file,header)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":{"id":res.ID,"address":os.Getenv("QINIU_PATH")+"/"+res.Address,},
	}
}


post "/project/fmt", ctx=>{
	ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
	body := ctx.FormValue("body")
	imports := ctx.FormValue("import")
	res := p.CodeFmt(todo,body,imports)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":res,
	}
}

get "/asset/:id", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    id := ctx.param("id")
    asset, _ := p.Asset(todo, id)
    ctx.json {
    		"code":200,
    		"msg":"ok",
    		"data":{"asset": asset},
    }
}

post "/asset/upload", ctx => {
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
     	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
        uid := ctx.FormValue("uid")
        name:=ctx.FormValue("name")
        category:=ctx.FormValue("category")
        isPublic:=ctx.FormValue("isPublic")
        assetType := ctx.FormValue("assetType")
        ip, _ := strconv.Atoi(isPublic)
        file,header,_:=ctx.FormFile("file")
        	asset:=&core.Asset{
        		 Name:name,
                 AuthorId:uid,
                 Category:category,
                 IsPublic:ip,
                 AssetType:assetType,
                 Status:1,
        	}
        	res,_ := p.UploadAsset(todo,asset,file,header)
        	ctx.json {
        		"code":200,
        		"msg":"ok",
        		"data":{"id":res.ID,"address":os.Getenv("QINIU_PATH")+res.Address,},
        	}
}
post "/spirits/upload", ctx => {
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
        ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Methods", "*")
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Headers", "*")
        if ctx.Request.Method == "OPTIONS" {
            ctx.ResponseWriter.WriteHeader(200)
            return
        }
        ctx.ParseMultipartForm(10 << 20) // Max 10 MB files
        userId := ""
        token := core.GetToken(ctx)
        user, err := p.GetUser(token)
        if err != nil {
            printf("get user error:", err)
        } else {
            userId = user.Id
        }

        files:=ctx.MultipartForm.File["files"]
        name:=ctx.FormValue("name")
        path,err := p.UploadSpirits(todo,name,files,userId)
        if (err != nil) {
                ctx.json({
                    "code": 400,
                    "msg": "Failed to read request body",
                })
                return
            }
        ctx.json {
            "code":200,
            "msg":"ok",
            "data":path,
        }
}

post "/asset/save", ctx => {
        ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
     	id := ctx.FormValue("id")
        uid := ctx.FormValue("uid")
        name:=ctx.FormValue("name")
        category:=ctx.FormValue("category")
        isPublic:=ctx.FormValue("isPublic")
        assetType := ctx.FormValue("assetType")
        ip, _ := strconv.Atoi(isPublic)
        file,header,_:=ctx.FormFile("file")
        	asset:=&core.Asset{
        	     ID:id,
        		 Name:name,
                 AuthorId:uid,
                 Category:category,
                 IsPublic:ip,
                 AssetType:assetType,
                 Status:1,
        	}
        	_, _ = p.SaveAsset(todo,asset,file,header)
        	ctx.json {
        		"code":200,
        		"msg":"ok",
        		"data":"",
        	}
}

get "/list/asset/:pageIndex/:pageSize/:assetType", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    pageIndex := ctx.param("pageIndex")
    pageSize := ctx.param("pageSize")
    assetType := ctx.param("assetType")
    category := ctx.param("category")
    isOrderByTime := ctx.param("isOrderByTime")
    isOrderByHot := ctx.param("isOrderByHot")
    uid := ctx.param("uid")
    result, _ := p.AssetList(todo, pageIndex, pageSize, assetType, category, isOrderByTime, isOrderByHot,uid)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": result,
    }
}


get "/clickCount/asset/:id/:assetType", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
    ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    id := ctx.param("id")
    assetType := ctx.param("assetType")
    p.IncrementAssetClickCount(todo, id, assetType)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": "",
    }
}

get "/list/pubProject/:pageIndex/:pageSize", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    pageIndex := ctx.param("pageIndex")
    pageSize := ctx.param("pageSize")
    result, _ := p.PubProjectList(todo, pageIndex, pageSize)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": result,
    }
}
get "/list/userProject/:uid/:pageIndex/:pageSize", ctx => {
    ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
    pageIndex := ctx.param("pageIndex")
    pageSize := ctx.param("pageSize")
    uid := ctx.param("uid")
    result, _ := p.UserProjectList(todo, pageIndex, pageSize,uid)
    ctx.json {
            "code":200,
            "msg":"ok",
            "data": result,
    }
}
post "/project/updateIsPublic", ctx=>{
	ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
	id := ctx.FormValue("id")
	_ = p.UpdatePublic(todo,id)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":"",
	}
}
post "/asset/search", ctx=>{
	ctx.ResponseWriter.Header().Set("Access-Control-Allow-Origin", "*")
	ctx.ResponseWriter.Header().Set("Content-Type", "application/json")
	search := ctx.FormValue("search")
	assetType := ctx.FormValue("assetType")
	assets,_ := p.SearchAsset(todo,search,assetType)
	ctx.json {
		"code":200,
		"msg":"ok",
		"data":assets,
	}
}

conf := &core.Config{}
p, _ = core.New(todo, conf)
core.CasdoorConfigInit()

run ":8080"